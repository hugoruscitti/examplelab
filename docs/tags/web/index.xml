<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Examplelab</title>
    <link>https://www.examplelab.com.ar/tags/web/</link>
    <description>Recent content in web on Examplelab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.examplelab.com.ar/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Imágenes &#34;Lasy&#34; en el navegador</title>
      <link>https://www.examplelab.com.ar/posts/2023-11-24-imagenes-async-en-el-navegador/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2023-11-24-imagenes-async-en-el-navegador/</guid>
      <description>Esta semana aprendí algo nuevo sobre la etiqueta img:
Resulta que podemos indicarle al navegador si en nuestro sitio se pueden cargar las imágenes bajo demanda, a medida que el usuario desplaza el contenido.
Lo único que tenemos que hacer es armar la etiqueta img de esta forma:
&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;/images/2013/pilas/portada.jpg&amp;#34;/&amp;gt; Probando el cambio en mi blog Para aprovechar la ocasión se me ocurrió mejorar la forma en la que se cargan las imágenes en este blog, a ver si notaba algún resultado.</description>
    </item>
    
    <item>
      <title>Componentes web con vanilla JavaScript</title>
      <link>https://www.examplelab.com.ar/posts/2023-11-17-componentes-web/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2023-11-17-componentes-web/</guid>
      <description>Hoy es mucho más fácil crear componentes web para nuestras aplicaciones, ya no se necesita una biblioteca para hacer esto.
¿Cómo se hace?, simplemente tenes que inventarte un nombre para el componente, por ejemplo contador-de-clicks y comenzar a utilizarlo dentro de tus archivos html así:
&amp;lt;contador-de-clicks&amp;gt;&amp;lt;/contador-de-clicks&amp;gt; Luego, para que este componente tenga comporatamiento es necesario escribir algo de código JavaScript para representarlo:
class ContadorDeClicks extends HTMLElement { constructor() { super(); } connectedCallback() { this.</description>
    </item>
    
    <item>
      <title>Jugando con PWA</title>
      <link>https://www.examplelab.com.ar/posts/2023-03-02-jugando-con-pwa/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2023-03-02-jugando-con-pwa/</guid>
      <description>Estamos usando el sistema de presupuestos y gastos personales que armé en Django junto con Any.
El tema es que ella suele usar el sistema desde el celular y no desde una computadora como hago yo. Así que notamos varias cosas para mejorar en la aplicación.
Por una lado, acceder a la aplicación con el navegador es algo incómodo, notamos que se podía hacer una acceso rápido desde la pantalla inicio del celular, pero con ese acceso igual aparecían las barras de navegación y eso quitaba algo de espacio en pantalla.</description>
    </item>
    
    <item>
      <title>Botones asincrónicos con HTMX</title>
      <link>https://www.examplelab.com.ar/posts/2023-02-21-botones-asincronicos-con-htmx/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2023-02-21-botones-asincronicos-con-htmx/</guid>
      <description>HTMX no deja de sorprenderme, me gusta mucho la simplicidad que te propone para resolver problemas.
Esta semana, por ejemplo, mejoré la forma en la que funcionan los formularios para crear transacciones en una aplicación web de gastos personales que estoy escribiendo.
Resulta que tenía un formulario que permitía registrar gastos en el sistema, pero esa acción demoraba en ejecutarse en el servidor, así que se me ocurrió agregar esta funcionalidad:</description>
    </item>
    
    <item>
      <title>Simplificando imports en svelte</title>
      <link>https://www.examplelab.com.ar/posts/2022-02-06-simplificando-imports-en-svelte/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2022-02-06-simplificando-imports-en-svelte/</guid>
      <description>Hace unas semanas comencé a migrar un proyecto personal a sveltekit, en parte porque quiero retomar ese proyecto y en parte porque quiero aprender una herramienta nueva como svelte.
Sin embargo a la hora de programar me encontraba escribiendo código como este:
import BotonCrearTransaccion from &amp;#39;../../../../components/botones/crear-transaccion.svelte&amp;#39;; import BotonIniciarPresupuesto from &amp;#39;../../../../components/botones/crear-presupuesto.svelte&amp;#39;; import store from &amp;#34;../../../../stores&amp;#34;; Observa todos esos ../ que aparecen delante de las rutas.
Estas rutas relativas no solo hacen que el código se vea muy feo, sino que también me impiden mover archivos dentro del proyecto, por ejemplo si quiero poner un componente dentro de una carpeta nueva o algo así.</description>
    </item>
    
    <item>
      <title>Devolviendo el control a tu navegador</title>
      <link>https://www.examplelab.com.ar/posts/2021-04-05-devolviendo-el-control-a-tu-navegador/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2021-04-05-devolviendo-el-control-a-tu-navegador/</guid>
      <description>Algo que me gusta mucho de la web es que está diseñada para ser interpretada por un navegador:
Tomemos como ejemplo alguna de las extensiones para bloquear contenido tipo AdBlock, ¿acaso no es una genialidad poder bloquear publicidades usando JavaScript?. ¿Y qué tal poder aumentar el tamaño de los textos pulsando CTRL +?, ¿y ver la actividad de red y bloquear dominios?.
Es fácil habituarse a un navegador, dar por sentado que todo lo que hace es algo común, pero lo cierto es que casi ningún otro medio nos permite tener tanto control sobre el contenido como hace un navegador.</description>
    </item>
    
    <item>
      <title>Aprendiendo Ember, otra vez</title>
      <link>https://www.examplelab.com.ar/posts/2021-03-19-aprendiendo-ember-otra-vez/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2021-03-19-aprendiendo-ember-otra-vez/</guid>
      <description>Hace más o menos 7 años mi biblioteca favorita para programar en JavaScript era AngularJS. Usaba la biblioteca en todos los proyectos que podía y me leía cada post que aparecía para aprender más. Quería hacer aplicaciones web conociendo la herramienta de principio a fin.
Aprendí mucho, y al tiempo noté que trabajaba bastante bien con AngularJS, conocía algunos trucos para hacer las cosas de manera modular, comunicar componentes sin que la cosa se volviera inmanejable y escribir tests, que era algo que ni sabía como hacer al principio.</description>
    </item>
    
    <item>
      <title>La culpa no es del DOM</title>
      <link>https://www.examplelab.com.ar/posts/2021-02-16-la-culpa-no-es-del-dom/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2021-02-16-la-culpa-no-es-del-dom/</guid>
      <description>Usar un Framework para escribir tu aplicación JavaScript tiene varias ventajas, sin embargo, creo que hay que revisar una idea que vi en varias charlas técnicas y algún que otro tutorial cuando se intenta justificar el uso de un Framework que me parece incorrecta.
Se suele decir que cambiar el DOM con las APIs nativas del navegador es un proceso costoso (computacionalmente hablando) y que por ese motivo conviene usar virtualDom o una abstracción similar.</description>
    </item>
    
    <item>
      <title>Tortugas en el tiempo</title>
      <link>https://www.examplelab.com.ar/posts/2020-08-08-tortugas-en-el-tiempo/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2020-08-08-tortugas-en-el-tiempo/</guid>
      <description>En este artículo describo como realicé un pequeño editor de código que permite ejecutar código para dibujar en pantalla, recreando parte de la clásica tortuga de Logo e investigando sobre ideas de aprendizaje y código.
Podes ver el proyecto aquí:
https://hugoruscitti.github.io/tortugas-en-el-tiempo Motivación Hace algunos años vi una charla llamada “Inventing on Principle” que me dejó con varias inquietudes a la hora de pensar sobre cómo programamos computadoras y pensamos acerca del código.</description>
    </item>
    
    <item>
      <title>Creando un visor de videos offline con electron y ember</title>
      <link>https://www.examplelab.com.ar/posts/2016-06-02-creando-un-visor-de-videos-offline-con-electron-y-ember/</link>
      <pubDate>Thu, 02 Jun 2016 19:17:18 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2016-06-02-creando-un-visor-de-videos-offline-con-electron-y-ember/</guid>
      <description>Introducción Esta semana me propuse hacer una aplicación muy sencilla con ember y electron, un visor de videos offline HTML5:
La aplicación en sí es muy simple, está pensanda para crear una biblioteca de videos para mirar con los más chiquitos de la familia sin necesidad de Internet, youtube o publicidades.
Técnicamente hablando, la aplicación simplemente busca videos en un directorio del equipo, los lista en pantalla y permite visualizarlos usando HTML5.</description>
    </item>
    
    <item>
      <title>Escalando imágenes con node-webkit</title>
      <link>https://www.examplelab.com.ar/posts/2015-01-06-escalando-imagenes-con-node-webkit/</link>
      <pubDate>Tue, 06 Jan 2015 18:37:43 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2015-01-06-escalando-imagenes-con-node-webkit/</guid>
      <description>En este artículo quiero mostrar cómo se pueden procesar imágenes de manera rápida y multiplataforma desde node-webkit, usando ImageMagick y emberjs.
ImageMagick es un conjunto de herramientas para procesar imágenes: escalar, recortar, convertir y aplicar efectos principalmente.
Un pequeño ejemplo Para mostrar cómo combinar estas dos tecnologías, armé un proyecto mas pequeño a modo de ejemplo. Está disponible en el repositorio hugoruscitti/image-resizer-node-webkit de mi cuenta en github.
La aplicación simplemente convierte la imagen que enviemos a 2 tamaños diferentes, y lo informa en pantalla.</description>
    </item>
    
    <item>
      <title>Usando ember-cli con node-webkit</title>
      <link>https://www.examplelab.com.ar/posts/2014-12-13-usando-ember-cli-con-node-webkit/</link>
      <pubDate>Sat, 13 Dec 2014 08:38:28 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2014-12-13-usando-ember-cli-con-node-webkit/</guid>
      <description>Hace unas semanas estoy muy entusiasmado con emberjs y la posibilidad de incorporarlo en las aplicaciones desktop que desarrollamos en huayra y conectar igualdad.
emberjs es un framework javascript para construir aplicaciones web, en cierta manera es similar a angularjs, pero con un enfoque diferente y algunas herramientas fantásticas como ember-cli.
Mi sorpresa principal fue encontrarme que ember-cli, no funcionaba junto a node-webkit inmediatamente. Me llevó varias horas comprender el motivo y poder resolverlo, así que en este post voy a resumir lo que aprendí y lo quiero compartir con ustedes.</description>
    </item>
    
    <item>
      <title>Paneles animados</title>
      <link>https://www.examplelab.com.ar/posts/2014-01-11-paneles-animados/</link>
      <pubDate>Sat, 11 Jan 2014 17:15:41 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2014-01-11-paneles-animados/</guid>
      <description>Hace unos dias, implementé animaciones en los paneles de huayra-stopmotion. Al principio opté por usar la forma mas rudimentaria de mostrar y ocultar paneles, pero luego descubrí como implementarlo usando css3 y un poquito de javascript:
En este post me gustaría contarte cómo lo implementé, ya que puede resultarte útil a la hora de hacer algo similar.
Acá está la versión completa en jsfiddle:
El layout Para mantener el maquetado lo mas sencillo posible, vamos a crear tres contenedores:</description>
    </item>
    
    <item>
      <title>Encuentro Linux en Temuco, Chile</title>
      <link>https://www.examplelab.com.ar/posts/2013-11-18-encuentro-linux-en-temuco-chile/</link>
      <pubDate>Mon, 18 Nov 2013 10:58:16 +0000</pubDate>
      
      <guid>https://www.examplelab.com.ar/posts/2013-11-18-encuentro-linux-en-temuco-chile/</guid>
      <description>Este mes tuve la posibilidad de participar de un evento muy interesante llamado Encuentro Linux, en la ciudad de Temuco:
Es la primera vez que visito Temuco, y de principio a fin estuvo espectacular, la Universidad de la Frontera en donde se realizó el evento es muy linda, está rodeada de jardines y espacios comunes grandes y cómodos:
El evento comenzó el dia jueves, tuve la oportunidad de dar una charla sobre pilas-engine y al dia siguiente otra sobre node-webkit.</description>
    </item>
    
  </channel>
</rss>
